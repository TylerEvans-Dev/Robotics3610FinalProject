%% Line follow but stop at black line
% clear; clc; close all; instrreset;
% r = MKR_MotorCarrier;
% r.reflectanceSetup;
error_targ = 0;  %The goal RPM

errors = 0;
times = 0;
count = 0;
count2 = -1;
last_last_error = 0;

error_sum = 0;
last_error = 0;
kp = 0.62;        %proportional gain
kd = 0.125;         %derivative gain
ki = 0.00092;         %integral gain
runtime = 100;

tic

while toc < runtime
    vals = r.readReflectance();
    error = (-2 * vals(1)) - vals(2) + vals(3) + (2 * vals(4));

    errors(end+1) = error;
    times(end+1) = toc;

    error = error_targ - error;
    error_sum = error_sum + error;
    error_delta = last_error-error;
    last_error = error;

    control = kp*error + ki*error_sum + kd*error_delta;
    
    control = control*error;
    control = max(min(control, 10), -10);
    
    if(vals(1) > 1000 && vals(3) > 1000)
        fprintf("vals")
        r.motor(4,0); %Stops Motor 4
        r.motor(3,0); %Stops Motor 3
        break;
    end

    if(vals < 230)
        r.motor(4,0);
            r.motor(3,0);
                r.motor(4,-10)
                r.motor(3,-10)
                pause(0.5)
                r.motor(4,0);
            r.motor(3,0);
            end

    if (error > 0) %Turn left
        r.motor(3, 7 + round(control));
        r.motor(4, 7);
    elseif(error < 0) %Turn right
        r.motor(3, 7);
        r.motor(4, 7 + round(control));
    end
    if(error == 0)
        r.motor(3, 10);
        r.motor(4, 10);
        fprintf("error = 0")
        if (error == last_last_error & last_last_error == 0)
                r.motor(3,0);
                r.motor(4,0);
                fprintf("error=lasterror")
%                 if(vals < 230)
%                     r.motor(3, -10);
%                     r.motor(4, -10);
%                 end
                break;
            
        end
        count = count +1;

        last_last_error = last_error;
        
    end

        lasta = vals(1);
        lastb = vals(4);
end
r.motor(4,0); %Stops Motor 4
r.motor(3,0); %Stops Motor 3
% clf
% hold on
% plot(times, errors,'linewidth',2,'Color',[1,0,0])
% yline(error_targ, '-', 'Target')
% %ylim([0 rpm_targ + 50])
% xlim([0 runtime])
% xlabel('Time (s)')
% ylabel('RPM')
% title('Motor RPM vs. Time')
% hold off

r.motor(3, 0);
r.motor(4, 0);
